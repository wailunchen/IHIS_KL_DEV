<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<mz:configuration format-version="1.0">
    <mz:data>
        <dr.Configuration:dr.Configuration Folder="Default" Key="DZ11644895250065" Name="wlf_test" Owner="D_WAILUN" Type="Workflow" encrypted="false" ver="6.0">
            <STRING:Access_Groups_-----.read_-----.write_-----.execute>
                <value value="Z_DR_Developer"/>
                <value value="Z_DR_Developer"/>
                <value value="Z_DR_Developer"/>
            </STRING:Access_Groups_-----.read_-----.write_-----.execute>
            <dr.ConfigAuxData:Auxiliary_Data ver="2.0">
                <Entries keyType="STRING" type="java.util.LinkedHashMap" valueType="STRING">
                    <Autostart value="false"/>
                    <Count value="1"/>
                    <Standalone value="false"/>
                    <Type value="Batch"/>
                </Entries>
            </dr.ConfigAuxData:Auxiliary_Data>
            <mz:workflow-template>
                <dr.WorkflowBatchData:Data Cancel_batch_count="2147483647" Cancel_batch_type="1" Log_On_CB="false" Template_Valid="true" Workflow_ID_Counter="2" ver="7.0">
                    <Nodes>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" ID="${identity@dr.WfNode#UDR_Transform..ID}" Name="UDR_Transform" XYposition="${layout@dr.WfNode#UDR_Transform..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" Type="1" ver="1.0">
                                    <dr.StuffyMapperData:Data ver="1.0">
                                        <dr.StuffyMapperData.sourceCode:Source_code active="true" fit="FINAL" ver="1.0">
                                            <Value><![CDATA[import ultra.ZZ_CA_UFL.UFL_WFB_UDR;
import ultra.ZZ_CA_UFL.UFL_Audit;

import apl.ZZ_CA_APL.APL_Common_Functions;
import apl.ZZ_CA_APL.APL_Audit_Functions;
import apl.ZZ_SVC0052.APL_SVC0052_Functions;

//Begin-Common error handling  
import apl.ZZC_CA_APL.APL_Common_Constants;
import apl.ZZC_CA_APL.APL_Common_Variables;
//End-Common error handling 
import apl.ZZC_CA_APL.APL_Common_Functions;

AuditRecord_TI audRecTransform;
mimPublish (global, "audRecTransform", AuditRecord_TI);
boolean firstUdr;
list <TYPE1_Rec_Int> ecsRecList;
boolean isReprocess;

initialize {
//Begin-Common error handling      
    ErrorTable = tableCreateShared(PRF_ST_COMMON_ERROR);
//End-Common error handling
    ZTB_CAZZ_DATAMAP = tableCreateShared(PRF_ST_ZTB_CAZZ_DATAMAP);
    debug("ZTB_CAZZ_DATAMAP \n" + ZTB_CAZZ_DATAMAP );
    abort("init check");
}

beginBatch {
    string filename = (string) mimGet("Disk_In", "Source Filename");
    globalOrigFilename = extractOriginalFilename(filename);    
    audRecTransform = udrCreate(AuditRecord_TI);
    initAudRec(audRecTransform, AUDR_REC_FUNC_TRANSFORM);
    firstUdr = true;
    ecsRecList = listCreate(TYPE1_Rec_Int);
    isReprocess = false;
}

consume {

    audRecTransform.IN_RECORD_COUNT = audRecTransform.IN_RECORD_COUNT + 1;
    // Data Transformation
    // Transformation logic function should be written in separate APL to be called here
    // When a transformation failed, increment REC_CM_ERROR_CNT
    
    // Transformation 1 - CREATION_TIMESTAMP
    // example : Transform CREATION_TIMESTAMP format to yyyy-MM-dd HH:mm:ss
    date newDateformat;
    if (firstUdr) {
        isReprocess =  (boolean) mimGet("Rec_Meta_Init", "isReprocess");
        S4IntfID = (string)mimGet("Rec_Meta_Init", "S4IntfID");
    }
    // Skip transformation if its a reprocessed scenario
    if (isReprocess == false)
    {   
        if (validateSVC0052Record(input))
        //if (true)
        {
            if (firstUdr)
                firstUdr = false;    
            udrRoute(input, "toAggr");
        }
        else
        {
            audRecTransform.ERROR_RECORD_COUNT = audRecTransform.ERROR_RECORD_COUNT + 1;
            input.INTF_TXN_ID = (string) mimGet("Rec_Meta_Init", "AUD_INTF_TXN_ID");
            //input.PREV_RECORD_TXN_ID = audRecTransform.RECORD_TXN_ID;
            if (firstUdr) {  
                audRecTransform.RECORD_FUNC_LOG = AUDR_REC_FUNC_LOG_TRANSFORM_FAILURE;
                firstUdr = false;
            }  
            // route at drain
            listAdd(ecsRecList, input);
        }
    }
    else
    {
        if (firstUdr)
            firstUdr = false;
        udrRoute(input, "toAggr");
    }

}

drain
{
    mimSet("audRecTransform", audRecTransform);
    // To flush the remaining records from the session which does not reach the RFC_BATCH_RECORD_LIMIT
    aggregationHintFlushSessions("Aggregation");
    
    int AUDR_IN_RECORD_COUNT = (int) mimGet("Rec_Meta_Init", "AUDR_IN_RECORD_COUNT");
    boolean allError= false;
    if (AUDR_IN_RECORD_COUNT == audRecTransform.ERROR_RECORD_COUNT) {
        allError = true;    
    }
    // route all error rec
    if (ecsRecList != null && listSize(ecsRecList) > 0) {
        for (TYPE1_Rec_Int ecsRec:  ecsRecList) {
            if (allError)
                ecsRec.allError = allError;
            udrRoute(ecsRec, "toECS");
            
        }
    } 

}]]></Value>
                                        </dr.StuffyMapperData.sourceCode:Source_code>
                                        <dr.StuffyMapperData.udrTypes:UDR_types active="true" fit="FINAL" ver="1.0">
                                            <dr.DRTypeInfo:Value>
                                                <dr.UltraClientInfo:value FormatName="ZZ_SVC0052.UFL_SVC0052_Records" TypeName="ZZ_SVC0052.UFL_SVC0052_Records.TYPE1_Rec_Int" ver="1.0"/>
                                            </dr.DRTypeInfo:Value>
                                        </dr.StuffyMapperData.udrTypes:UDR_types>
                                    </dr.StuffyMapperData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.ultra.UltraDecoderInsp" ID="${identity@dr.WfNode#Decoder..ID}" Name="Decoder" XYposition="${layout@dr.WfNode#Decoder..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.ultra.UltraDecoderInsp" Type="1" ver="1.0">
                                    <dr.UltraDecoderData:Data ver="1.0">
                                        <dr.UltraDecoderData.decoderName:Decoder_name active="true" fit="FINAL" ver="1.0">
                                            <Value value="ZZ_SVC0052.UFL_SVC0052_Records.SVC0052_Rec_decoder"/>
                                        </dr.UltraDecoderData.decoderName:Decoder_name>
                                        <dr.UltraDecoderData.decoderConfig:Decoder_Config active="true" fit="FINAL" ver="1.0">
                                            <Value/>
                                        </dr.UltraDecoderData.decoderConfig:Decoder_Config>
                                        <dr.UltraDecoderData.errorMode:Error_Mode active="true" fit="FINAL" ver="1.0">
                                            <Value value="2"/>
                                        </dr.UltraDecoderData.errorMode:Error_Mode>
                                        <dr.UltraDecoderData.doFullDecode:Full_Decode active="true" fit="FINAL" ver="1.0">
                                            <Value value="true"/>
                                        </dr.UltraDecoderData.doFullDecode:Full_Decode>
                                    </dr.UltraDecoderData:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.dupudr2.DupUDRDet2Insp" ID="${identity@dr.WfNode#Type1_Dup_Check..ID}" Name="Type1_Dup_Check" XYposition="${layout@dr.WfNode#Type1_Dup_Check..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.dupudr2.DupUDRDet2Insp" Type="1" ver="1.0">
                                    <dr.DupUDRDet2Config:Data ver="7.0">
                                        <dr.DupUDRDet2Config.profile:Profile_Key active="true" fit="FINAL" ver="1.0">
                                            <dr.DRConfiguration:Value Folder="ZZ_SVC0052" Key="DZ11642152092709" Name="PRF_INBOUND_DUU" Type="Duplicate UDR Profile" ver="1.0"/>
                                        </dr.DupUDRDet2Config.profile:Profile_Key>
                                        <dr.DupUDRDet2Config.duplicateRoute:Duplicate_route active="true" fit="FINAL" ver="1.0">
                                            <Value value="toDupHandling"/>
                                        </dr.DupUDRDet2Config.duplicateRoute:Duplicate_route>
                                        <dr.DupUDRDet2Config.loggedMIMEntries:Logged_MIM_entries active="true" fit="FINAL" ver="1.0">
                                            <STRING:Value>
                                                <value value="Disk_In.Source Filename"/>
                                            </STRING:Value>
                                        </dr.DupUDRDet2Config.loggedMIMEntries:Logged_MIM_entries>
                                        <dr.DupUDRDet2Config.suppressWarnings:Suppress_warning_logs active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DupUDRDet2Config.suppressWarnings:Suppress_warning_logs>
                                    </dr.DupUDRDet2Config:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" ID="${identity@dr.WfNode#Duplicate_Handling..ID}" Name="Duplicate_Handling" XYposition="${layout@dr.WfNode#Duplicate_Handling..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" Type="1" ver="1.0">
                                    <dr.StuffyMapperData:Data ver="1.0">
                                        <dr.StuffyMapperData.sourceCode:Source_code active="true" fit="FINAL" ver="1.0">
                                            <Value><![CDATA[import ultra.ZZ_CA_UFL.UFL_Audit;
import apl.ZZ_CA_APL.APL_Audit_Functions;
import apl.ZZ_CA_APL.APL_Common_Functions;

//Begin-Common error handling  
import apl.ZZ_CA_APL.APL_Constants;
import apl.ZZC_CA_APL.APL_Common_Constants;
import apl.ZZC_CA_APL.APL_Error_Functions;
import apl.ZZC_CA_APL.APL_Common_Variables;
//End-Common error handling  

AuditRecord_TI audRecDuplicate;
mimPublish (global, "audRecDuplicate", AuditRecord_TI);
boolean firstUdr;

list <TYPE1_Rec_Int> ecsRecList;

initialize {
//Begin-Common error handling      
    ErrorTable = tableCreateShared(PRF_ST_COMMON_ERROR);
//End-Common error handling        
}

beginBatch
{
    string filename = (string) mimGet("Disk_In", "Source Filename");
    globalOrigFilename = extractOriginalFilename(filename);
    audRecDuplicate = udrCreate(AuditRecord_TI);
    initAudRec(audRecDuplicate, AUDR_REC_FUNC_DUPLICATE_CHECK);
    firstUdr = true;
    ecsRecList = listCreate(TYPE1_Rec_Int);
}

consume {
    // Route Duplicated UDR to ECS
    if (instanceOf(input, TYPE1_Rec_Int)) 
    {
        TYPE1_Rec_Int rec = (TYPE1_Rec_Int) input;
        
        audRecDuplicate.ERROR_RECORD_COUNT = audRecDuplicate.ERROR_RECORD_COUNT + 1;
        rec.INTF_TXN_ID = (string) mimGet("Rec_Meta_Init", "AUD_INTF_TXN_ID");
        rec.PREV_RECORD_TXN_ID = audRecDuplicate.RECORD_TXN_ID;
        if (firstUdr) {  
            audRecDuplicate.RECORD_FUNC_LOG = AUDR_REC_FUNC_LOG_DUPLICATE_UDR;
            firstUdr = false;
        }
//Begin-Common error handling
        list<string> pvalist = null;
        //pvalist = listCreate(string);
        //listAdd(pvalist, "value1");
        //listAdd(pvalist, "value2");         
        //udrAddError(rec, "IF0112_ECS0001", "Duplicate Inbound UDR");
        udrAddError(rec, INTF_ID_IF0112 + "_" + ERROR_CODE_1E031, getErrorDesc(ERROR_CODE_1E031, pvalist));
//End-Common error handling          
        // route at drain
        listAdd(ecsRecList, rec);

    }
}

drain
{
    mimSet("audRecDuplicate", audRecDuplicate);
    int AUDR_IN_RECORD_COUNT = (int) mimGet("Rec_Meta_Init", "AUDR_IN_RECORD_COUNT");
    boolean allError = false;
    if (AUDR_IN_RECORD_COUNT == audRecDuplicate.ERROR_RECORD_COUNT) {
        allError = true;    
    }
    // route all error rec
    if (ecsRecList != null && listSize(ecsRecList) > 0) {
        for (TYPE1_Rec_Int ecsRec:  ecsRecList) {
            if (allError)
                ecsRec.allError = allError;
            udrRoute(ecsRec, "toECS");
            
        }
    }
}]]></Value>
                                        </dr.StuffyMapperData.sourceCode:Source_code>
                                        <dr.StuffyMapperData.udrTypes:UDR_types active="true" fit="FINAL" ver="1.0">
                                            <dr.DRTypeInfo:Value>
                                                <dr.UltraClientInfo:value FormatName="ZZ_SVC0052.UFL_SVC0052_Records" TypeName="ZZ_SVC0052.UFL_SVC0052_Records.TYPE1_Rec_Int" ver="1.0"/>
                                            </dr.DRTypeInfo:Value>
                                        </dr.StuffyMapperData.udrTypes:UDR_types>
                                    </dr.StuffyMapperData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" ID="${identity@dr.WfNode#Rec_Meta_Init..ID}" Name="Rec_Meta_Init" XYposition="${layout@dr.WfNode#Rec_Meta_Init..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" Type="1" ver="1.0">
                                    <dr.StuffyMapperData:Data ver="1.0">
                                        <dr.StuffyMapperData.sourceCode:Source_code active="true" fit="FINAL" ver="1.0">
                                            <Value><![CDATA[import ultra.ZZ_SVC0052.UFL_SVC0052_Records;
import ultra.ZZ_CA_UFL.UFL_ECS;
import ultra.ZZ_CA_UFL.UFL_Audit;

//Begin-Common error handling  
//import apl.ZZ_CA_APL.APL_FileLevel_Functions;
import apl.ZZ_CA_APL.APL_Constants;
import apl.ZZC_CA_APL.APL_Common_Constants;
import apl.ZZ_SVC0052.APL_FileLevel_Functions;
import apl.ZZC_CA_APL.APL_Common_Variables;
import apl.ZZC_CA_APL.APL_Error_Functions;
//End-Common error handling  

import apl.ZZ_CA_APL.APL_Common_Functions;
import apl.ZZ_CA_APL.APL_Audit_Functions;
import apl.ZZ_SVC0052.APL_SVC0052_Functions;
import apl.ZZC_CA_APL.APL_Common_Functions;

TYPE1_Header_Internal header;

string transactionID, originalFilename, interfaceID;
//int rec_in_count;

mimPublish(global, "PROCESSED_TIMESTAMP", date);
//mimPublish(global, "REC_IN_COUNT", int);
mimPublish(global, "TRANSACTION_ID", string);
mimPublish(global, "ORIGINAL_FILENAME", string);

// new audit
string AUD_INTF_TXN_ID;
mimPublish(global, "AUD_INTF_TXN_ID", string);
string AUD_INST_ID;
mimPublish(global, "AUD_INST_ID", string);
string AUD_SOURCE_SYS;
mimPublish (global, "AUD_SOURCE_SYS", string);
AuditTask_TI audTask;
mimPublish(global, "audTask", AuditTask_TI);
AuditRecord_TI audRecDecode;
AuditRecord_TI audRecDuplicate;
mimPublish(global, "audRecDecode", AuditRecord_TI);
mimPublish(global, "audRecDuplicate", AuditRecord_TI);
int AUDR_IN_RECORD_COUNT;
mimPublish(global, "AUDR_IN_RECORD_COUNT", int);
string AUDR_PREV_RECORD_TXN_ID;
mimPublish(global, "AUDR_PREV_RECORD_TXN_ID", string);
//Begin-Common error handling
//int errorType;
//End-Common error handling
string errorMsg;
string ecsErrorCodes;

boolean firstUdr;
boolean isReprocess;
mimPublish(global, "isReprocess", boolean);
mimPublish(global, "S4IntfID", string);

initialize {
//Begin-Common error handling      
    ErrorTable = tableCreateShared(PRF_ST_COMMON_ERROR);
//End-Common error handling        
    ZTB_CACM_INTF_ID = tableCreateShared (PRF_ST_ZTB_CACM_INTF_ID); 
}

beginBatch
{   
    debug("beginBatch");
//Begin-Common error handling    
    //errorType = 0;
//End-Common error handling    
    errorMsg = null;
    ecsErrorCodes = null;
    header = null;
   
    //rec_in_count = 0;
    string filename = (string) mimGet("Disk_In", "Source Filename");
    string filenamePath = (string) mimGet("Disk_In", "Source Pathname");
    originalFilename = extractOriginalFilename(filename);
    globalOrigFilename = originalFilename;
    
    transactionID = extractTransactionID(filename);
    
    interfaceID = getInterfaceID((string) mimGet("Workflow", "Workflow Name"));
    
    
    mimSet("PROCESSED_TIMESTAMP", dateCreateNow());
    mimSet("TRANSACTION_ID", transactionID);
    mimSet("ORIGINAL_FILENAME", originalFilename);
    
    audRecDecode = udrCreate(AuditRecord_TI);
    initAudRec(audRecDecode,AUDR_REC_FUNC_DECODE);
    audRecDuplicate = udrCreate(AuditRecord_TI); 
    initAudRec(audRecDuplicate, AUDR_REC_FUNC_DUPLICATE_CHECK);
    AUD_INTF_TXN_ID = transactionID;
    mimSet("AUD_INTF_TXN_ID", AUD_INTF_TXN_ID);

    audTask = udrCreate(AuditTask_TI);
    initAudTask(audTask, AUDT_TASK_PROCESS_RECORD, filenamePath + "/" + filename);
    mimSet("audTask", audTask);
    
    if (isReprocessed(filename)) {
        AUDR_PREV_RECORD_TXN_ID = extractBatchRecTxnId(filename);
        mimSet("AUDR_PREV_RECORD_TXN_ID", AUDR_PREV_RECORD_TXN_ID);
        isReprocess = true;
        audRecDecode.PREV_RECORD_TXN_ID = AUDR_PREV_RECORD_TXN_ID;
    } else {
        AUDR_PREV_RECORD_TXN_ID = null;
        isReprocess = false;
    }
    mimSet("isReprocess", isReprocess);
    firstUdr = true;
    
}

consume {
    if (instanceOf(input, TYPE1_Header_Internal)) 
    {
       header = (TYPE1_Header_Internal) input;
    }
    
    else if (instanceOf(input, TYPE1_Rec_Int)) 
    {
        TYPE1_Rec_Int rec = (TYPE1_Rec_Int) input;
        
        setRecordMetadata(rec, header, originalFilename, interfaceID, AUD_INTF_TXN_ID, AUDR_PREV_RECORD_TXN_ID, isReprocess);
        
        // Record is not fully mapped as further decode and mapping needed for dynamic length input/record
        if (!postDecodeMapping(rec)) {
            debug("Undecodable datatype detected after postDecodeMapping()");
            
            ecsErrorCodes = ERROR_CODE_1E999_FL;
            errorMsg = "Undecodable/corrupted file";
            
            ECS_Error_Int udrError = udrCreate(ECS_Error_Int);
            initializeBatchECSUdr(udrError, transactionID, originalFilename, ecsErrorCodes, "Rec_Meta_Init");
            list<string> pvalist = null;
            errorFileECSHandling(udrError, ERROR_CODE_1E999_FL, errorMsg, pvalist);
        }
        
        if (firstUdr) {
            AUD_INST_ID = rec.INSTITUTION_ID;
            mimSet("AUD_INST_ID", AUD_INST_ID);
            AUD_SOURCE_SYS = rec.SYSTEM_ID; 
            mimSet("AUD_SOURCE_SYS", AUD_SOURCE_SYS);
            firstUdr = false;
            S4IntfID = lookupS4IntfID(rec.INTERFACE_ID, SVC_ID_SVC0052);
            mimSet("S4IntfID", S4IntfID);
        }
        
        audRecDecode.IN_RECORD_COUNT = audRecDecode.IN_RECORD_COUNT + 1;

        // To skip duplicate check or not
        // Reprocessed records will skip duplicate UDR check
        if ( dynamicFieldGet("UDR", "Check_UDR_Duplicate") == true &&
            isReprocess == false) {
            audRecDuplicate.IN_RECORD_COUNT = audRecDuplicate.IN_RECORD_COUNT + 1;    
            udrRoute(rec, "toDupUDRCheck");
            
        } else
            udrRoute(rec, "toTransform");
    }
    
    else if (instanceOf(input, bytearray)) 
    {
        debug("Undecodable datatype detected");
//Begin-Common error handling        
        //errorType = 2;
//End-Common error handling        
        // set the global value it will be used in initializeECSUdr function in drain block
//Begin-Common error handling             
        //ecsErrorCodes = AUDIT_ERRORCODE_UNDECODABLE;
        ecsErrorCodes = ERROR_CODE_1E999_FL;        
//End-Common error handling          
        errorMsg = "Undecodable/corrupted file"; 
        
        ECS_Error_Int udrError = udrCreate(ECS_Error_Int);
        initializeBatchECSUdr(udrError, transactionID, originalFilename, ecsErrorCodes, "Rec_Meta_Init");
//Begin-Common error handling
        list<string> pvalist = null;
        //pvalist = listCreate(string);
        //listAdd(pvalist, "value1");
        //listAdd(pvalist, "value2");        
        errorFileECSHandling(udrError, ERROR_CODE_1E999_FL, errorMsg, pvalist);        
//      errorFileECSHandling(errorMsg, udrError, errorType);
//End-Common error handling          
        
    }
}

drain
{
    debug("drain");
    mimSet("audRecDecode", audRecDecode);
    mimSet("audRecDuplicate", audRecDuplicate);   
    mimSet("AUDR_IN_RECORD_COUNT", audRecDecode.IN_RECORD_COUNT);      

}

void initializeBatchECSUdr (ECS_Error_Int ecsUdr, string transID, string origFilename, string errorCodes, string lastAgent)
{
    debug("-------------------------");
    debug("Function Name: initializeBatchECSUdr()");
    debug("initializeBatchECSUdr.System Id:" + globalOrigFilename);
    debug("initializeBatchECSUdr.Input: ecsUdr = " + ecsUdr);
    debug("initializeBatchECSUdr.Input: transID = " + transID);
    debug("initializeBatchECSUdr.Input: origFilename = " + origFilename);
    debug("initializeBatchECSUdr.Input: errorCodes = " + errorCodes);
    debug("initializeBatchECSUdr.Input: lastAgent = " + lastAgent);
        
    ecsUdr.timestamp     = dateCreateNow();
    ecsUdr.transactionID = transID;
	ecsUdr.filename      = origFilename + ".err";
    ecsUdr.errorCodes    = strREReplaceAll(errorCodes,"_FL$", "");
    ecsUdr.lastAgent     = lastAgent;
    ecsUdr.INTF_TXN_ID = AUD_INTF_TXN_ID;
    ecsUdr.PREV_RECORD_TXN_ID = AUDR_PREV_RECORD_TXN_ID;
    
    debug("initializeBatchECSUdr.Output: void");     
    
}]]></Value>
                                        </dr.StuffyMapperData.sourceCode:Source_code>
                                        <dr.StuffyMapperData.udrTypes:UDR_types active="true" fit="FINAL" ver="1.0">
                                            <dr.DRTypeInfo:Value>
                                                <dr.DRTypeInfo:value TypeName="bytearray" ver="1.0"/>
                                                <dr.UltraClientInfo:value FormatName="ZZ_SVC0052.UFL_SVC0052_Records" TypeName="ZZ_SVC0052.UFL_SVC0052_Records.TYPE1_Header_Internal" ver="1.0"/>
                                                <dr.UltraClientInfo:value FormatName="ZZ_SVC0052.UFL_SVC0052_Records" TypeName="ZZ_SVC0052.UFL_SVC0052_Records.TYPE1_Rec_Int" ver="1.0"/>
                                            </dr.DRTypeInfo:Value>
                                        </dr.StuffyMapperData.udrTypes:UDR_types>
                                    </dr.StuffyMapperData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.workflowbridge.batch.fwd.WfbBatchFwdInsp" ID="${identity@dr.WfNode#SAP_Processing_Workflow_Bridge..ID}" Name="SAP_Processing_Workflow_Bridge" XYposition="${layout@dr.WfNode#SAP_Processing_Workflow_Bridge..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.workflowbridge.batch.fwd.WfbBatchFwdInsp" Type="1" ver="1.0">
                                    <dr.WfBridgeFwdData:Data ver="6.0">
                                        <dr.WfBridgeFwdData.profile:Profile_Key active="true" fit="FINAL" ver="1.0">
                                            <dr.DRConfiguration:Value Folder="ZZ_CA_PRF" Key="DZ11617790312094" Name="PRF_WFB_SAP_Processing" Type="Workflow Bridge Profile" ver="1.0"/>
                                        </dr.WfBridgeFwdData.profile:Profile_Key>
                                    </dr.WfBridgeFwdData:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" ID="${identity@dr.WfNode#Response_Analysis..ID}" Name="Response_Analysis" XYposition="${layout@dr.WfNode#Response_Analysis..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.analysis.StuffyMapperInsp" Type="1" ver="1.0">
                                    <dr.StuffyMapperData:Data ver="1.0">
                                        <dr.StuffyMapperData.sourceCode:Source_code active="true" fit="FINAL" ver="1.0">
                                            <Value><![CDATA[import ultra.ZZ_SVC0052.UFL_SVC0052_Records;
import ultra.ZZ_CA_UFL.UFL_WFB_UDR;
import ultra.ZZ_CA_UFL.UFL_Audit;

import apl.ZZ_CA_APL.APL_Audit_Functions;
import apl.ZZ_CA_APL.APL_Common_Functions;
import apl.ZZ_SVC0052.APL_Payload_Functions;

//Begin-Common error handling  
import apl.ZZ_CA_APL.APL_Constants;
import apl.ZZC_CA_APL.APL_Common_Constants;
import apl.ZZC_CA_APL.APL_Common_Variables;
//End-Common error handling  

list <AuditRecord_TI> audRecResponseList;
list <TYPE1_Rec_Int> ecsRecList;

initialize {
    // new audit
    AUDT_WFNAME = (string) mimGet("Workflow", "Workflow Name");
    AUDT_PICO = (string) mimGet("Workflow", "Execution Context");
    AUDALL_CREATED_CHANGED_BY = getMZUser();
    // new audit end
//Begin-Common error handling      
    ErrorTable = tableCreateShared(PRF_ST_COMMON_ERROR);
    ErrorClassTable = tableCreateShared(PRF_ST_COMMON_ERROR_CLASS);
//End-Common error handling       
}


beginBatch {
    debug("beginBatch"); 
    string filename = (string) mimGet("Disk_In", "Source Filename");
    globalOrigFilename = extractOriginalFilename(filename);  
    audRecResponseList = listCreate(AuditRecord_TI);
    ecsRecList = listCreate(TYPE1_Rec_Int);
}

consume {
    debug("consume");
    if (instanceOf(input, ConsumeCycleUDR)) 
    {
        ConsumeCycleUDR ccUdr = (ConsumeCycleUDR) input;
        CCData ccd = (CCData) ccUdr.Data;
        
        list<TYPE1_Rec_Int> type1RecList = mapEcsRecordsfromCCData(ccd);
        
        AuditRecord_TI audRecResponse = udrCreate(AuditRecord_TI);
        initAudRec(audRecResponse, AUDR_REC_FUNC_WFB_RESPONSE);
        audRecResponse.IN_RECORD_COUNT = ccd.batchSize;
        //debug("ccu.PREV_BATCH_RECORD_TXN_ID:" + ccu.PREV_BATCH_RECORD_TXN_ID);
        //audRecResponse.PREV_RECORD_TXN_ID = ccd.PREV_RECORD_TXN_ID;
        //debug("audRecResponse.PREV_BATCH_RECORD_TXN_ID:" + audRecResponse.PREV_BATCH_RECORD_TXN_ID);

        boolean firstUdrError = true;
        
        if (type1RecList != null)
        {
            for (int i=0; i<listSize(type1RecList); i++)
            {
                TYPE1_Rec_Int type1Rec = listGet(type1RecList, i);
                
                audRecResponse.ERROR_RECORD_COUNT = audRecResponse.ERROR_RECORD_COUNT + 1;
                //type1Rec.PREV_RECORD_TXN_ID = audRecResponse.RECORD_TXN_ID;
                
                if (firstUdrError) {  
                    audRecResponse.RECORD_FUNC_LOG = AUDR_REC_FUNC_LOG_WFB_ERROR_RESPONSE;
                    firstUdrError = false;
                }
//Begin-Common error handling
                //udrAddError(type1Rec, "IF0112_ECS0003", type1Rec.ERROR_REASON);  
                errorRfcECSHandling(type1Rec);
//End-Common error handling     
                
                // route at drain
                listAdd(ecsRecList, type1Rec);
                
                debug(type1Rec);
            }
        }
        listAdd(audRecResponseList, audRecResponse);
    }
}

drain
{
    debug("drain");
    setAuditBatch();
 
}


void setAuditBatch() {
    debug("-------------------------");
    debug("Function Name: setAuditBatch()");
    debug("setAuditBatch.System Id:" + globalOrigFilename);
    debug("setAuditBatch.Input: void");
    
    string AUD_INST_ID = (string) mimGet("Rec_Meta_Init", "AUD_INST_ID");
    string AUD_SOURCE_SYS = (string) mimGet("Rec_Meta_Init", "AUD_SOURCE_SYS");
    string AUD_INTF_TXN_ID = (string) mimGet("Rec_Meta_Init", "AUD_INTF_TXN_ID");
    
    AuditTask_TI audTask = (AuditTask_TI) mimGet("Rec_Meta_Init", "audTask");
        
    AuditRecord_TI audRecDecode = (AuditRecord_TI) mimGet("Rec_Meta_Init", "audRecDecode");
    AuditRecord_TI audRecDupRecMetaInit = (AuditRecord_TI) mimGet("Rec_Meta_Init", "audRecDuplicate");
    AuditRecord_TI audRecDupDupHand = (AuditRecord_TI) mimGet("Duplicate_Handling", "audRecDuplicate");
    AuditRecord_TI audRecDuplicate;
    AuditRecord_TI audRecTransform = (AuditRecord_TI) mimGet("UDR_Transform", "audRecTransform");
    list <AuditRecord_TI> audRecAggregateList = (list <AuditRecord_TI>) mimGet("Aggregation", "audRecAggregateList");
    
    map <int, AuditRecord_TI> audRecMap = mapCreate(int, AuditRecord_TI);
    // for ordering the audRec
    int audRecMapKey;
    string AUDR_PREV_RECORD_TXN_ID = (string) mimGet("Rec_Meta_Init", "AUDR_PREV_RECORD_TXN_ID");
    audRecDecode.PREV_RECORD_TXN_ID = AUDR_PREV_RECORD_TXN_ID;
    mapSet(audRecMap, audRecMapKey++, audRecDecode);
    // extract the AUDR_PREV_RECORD_TXN_ID
    
    // set only for un skip duplicate check
    if (audRecDupRecMetaInit.IN_RECORD_COUNT > 0) {
        // combine with audRecCDupDupHand
        // if we got error count, used this as BATCH_RECORD_TXN_ID
        string AUDR_RECORD_TXN_ID;
        if (audRecDupDupHand.ERROR_RECORD_COUNT > 0)
            AUDR_RECORD_TXN_ID = audRecDupDupHand.RECORD_TXN_ID;
        else
            AUDR_RECORD_TXN_ID = audRecDupRecMetaInit.RECORD_TXN_ID;
            
        audRecDuplicate = udrCreate(AuditRecord_TI);
        //changed line 120
        setAudRec(audRecDuplicate, AUDR_RECORD_TXN_ID, audRecDupRecMetaInit.RECORD_FUNC, null,
            audRecDupRecMetaInit.IN_RECORD_COUNT, audRecDupDupHand.ERROR_RECORD_COUNT, null, null, audRecDupDupHand.RECORD_FUNC_LOG);
        mapSet(audRecMap, audRecMapKey++, audRecDuplicate);
    }
    debug("audRecTransform.IN_RECORD_COUNT:" + audRecTransform.IN_RECORD_COUNT);
    if (audRecTransform.IN_RECORD_COUNT > 0) {
        //audRecTransform.PREV_RECORD_TXN_ID = AUDR_PREV_RECORD_TXN_ID;
        mapSet(audRecMap, audRecMapKey++, audRecTransform);
    }
    if (audRecAggregateList != null && listSize(audRecAggregateList) > 0) {
        for (AuditRecord_TI audRec: audRecAggregateList) {
            //audRec.PREV_RECORD_TXN_ID = AUDR_PREV_RECORD_TXN_ID;
            mapSet(audRecMap, audRecMapKey++, audRec);
        }
    }
    if (audRecResponseList != null && listSize(audRecResponseList) > 0) {
        for (AuditRecord_TI audRec: audRecResponseList)
            mapSet(audRecMap, audRecMapKey++, audRec);  
    }
    string AUDT_DESTINATION_SAP = "WFB_SAP_Processing_Workflow_Bridge";
    string AUDT_DESTINATION_ECS = "ECS";
    string AUDT_DESTINATION_ECS_SAP = AUDT_DESTINATION_ECS + " " + AUDT_DESTINATION_SAP;
    string AUDT_DESTINATION = AUDT_DESTINATION_SAP;
    string AUDT_ERROR_LOG = null;
    
    
    /* no need to check since it cancel batch
     if (audRecDecode.ERROR_RECORD_COUNT > 0) { 
        AUDT_ERROR_LOG = AUDT_ERROR_LOG_UNDECODABLE;  
        AUDT_DESTINATION = AUDT_DESTINATION_ECS;
    }*/
    if (audRecDuplicate.ERROR_RECORD_COUNT > 0) {
        if (AUDT_ERROR_LOG == null)
            AUDT_ERROR_LOG = AUDT_ERR_LOG_DUPLICATE_UDR;
        else
            AUDT_ERROR_LOG = AUDT_ERROR_LOG + " " + AUDT_ERR_LOG_DUPLICATE_UDR;
        
        if (audRecDecode.IN_RECORD_COUNT == audRecDuplicate.ERROR_RECORD_COUNT)
            AUDT_DESTINATION = AUDT_DESTINATION_ECS;
        else 
            AUDT_DESTINATION = AUDT_DESTINATION_ECS_SAP;
    } 
    if (audRecTransform.ERROR_RECORD_COUNT > 0) { 
        if (AUDT_ERROR_LOG == null)
            AUDT_ERROR_LOG = AUDT_ERR_LOG_TRANSFORM_FAILURE;
        else
            AUDT_ERROR_LOG = AUDT_ERROR_LOG + " " + AUDT_ERR_LOG_TRANSFORM_FAILURE;
        
        if (audRecDecode.IN_RECORD_COUNT == audRecTransform.ERROR_RECORD_COUNT &&
            AUDT_DESTINATION != AUDT_DESTINATION_ECS_SAP)
            AUDT_DESTINATION = AUDT_DESTINATION_ECS;
        else
            AUDT_DESTINATION = AUDT_DESTINATION_ECS_SAP;
          
    } 
    if (audRecResponseList != null && listSize(audRecResponseList) > 0) {
        int totalRecEcs;
        for (AuditRecord_TI audRec: audRecResponseList) {
            totalRecEcs = totalRecEcs + audRec.ERROR_RECORD_COUNT;
        }
        if (totalRecEcs > 0) {
            if (AUDT_ERROR_LOG == null)
                AUDT_ERROR_LOG = AUDT_ERR_LOG_WFB_ERROR_RESPONSE;
            else
                AUDT_ERROR_LOG = AUDT_ERROR_LOG + " " + AUDT_ERR_LOG_WFB_ERROR_RESPONSE;
            boolean allError = false;
            if (audRecDecode.IN_RECORD_COUNT == totalRecEcs) {
                if (AUDT_DESTINATION != AUDT_DESTINATION_ECS_SAP)
                    AUDT_DESTINATION = AUDT_DESTINATION_ECS;
                allError = true;
            } else 
                AUDT_DESTINATION = AUDT_DESTINATION_ECS_SAP;
            if (ecsRecList != null && listSize(ecsRecList) > 0) {
                for (TYPE1_Rec_Int ecsRec:  ecsRecList) {
                    if (allError)
                        ecsRec.allError = allError;
                    udrRoute(ecsRec, "toECS");
                }
            }  
        }
    }
    
    if (AUDT_DESTINATION == AUDT_DESTINATION_SAP) {
        // that mean no error at all, set AUD_STATUS to completed
        udrRoute(udrEncode(MZ_ZZ_TAGGED_ENC, updateAudStatusInstIdSrcSys(AUD_INTF_TXN_ID, 
            AUD_INST_ID, AUD_STATUS_COMPLETED, AUD_SOURCE_SYS)), "toAudit");
    } else
        udrRoute(udrEncode(MZ_ZZ_TAGGED_ENC, updateAudInstIdSrcSys(AUD_INTF_TXN_ID, AUD_INST_ID, 
            AUD_SOURCE_SYS)), "toAudit");
    
    udrRoute(udrEncode(MZ_ZZ_TAGGED_ENC, insertAudTask(audTask.TASK_TXN_ID, AUD_INTF_TXN_ID, audTask.TASK,
        AUDT_STATUS_COMPLETED, audTask.SOURCE, AUDT_DESTINATION, AUDT_ERROR_LOG)), "toAudit");
    
    list <int> audRecMapKeyList = mapKeys(audRecMap);
    // sort based on the key
    listSort(audRecMapKeyList);
    for (int key: audRecMapKeyList) {
        AuditRecord_TI audRec = mapGet(audRecMap, key);
        audRec.TASK_TXN_ID = audTask.TASK_TXN_ID;
        udrRoute(udrEncode(MZ_ZZ_TAGGED_ENC, insertAudRec(audRec)), "toAudit");
    }
    debug("setAuditBatch.Output: void");       
}]]></Value>
                                        </dr.StuffyMapperData.sourceCode:Source_code>
                                        <dr.StuffyMapperData.udrTypes:UDR_types active="true" fit="FINAL" ver="1.0">
                                            <dr.DRTypeInfo:Value>
                                                <dr.DRTypeInfo:value TypeName="wfb.ConsumeCycleUDR" ver="1.0"/>
                                            </dr.DRTypeInfo:Value>
                                        </dr.StuffyMapperData.udrTypes:UDR_types>
                                    </dr.StuffyMapperData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.ecsforw.EcsForwInsp" ID="${identity@dr.WfNode#ECS..ID}" Name="ECS" XYposition="${layout@dr.WfNode#ECS..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.ecsforw.EcsForwInsp" Type="1" ver="1.0">
                                    <dr.EcsForwData:Data ver="1.0">
                                        <dr.EcsForwData.loggedMIM:Logged_MIM_entries active="true" fit="FINAL" ver="1.0">
                                            <STRING:Value>
                                                <value value="Workflow.Workflow Name"/>
                                                <value value="Rec_Meta_Init.ORIGINAL_FILENAME"/>
                                            </STRING:Value>
                                        </dr.EcsForwData.loggedMIM:Logged_MIM_entries>
                                    </dr.EcsForwData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.diskoutput.DiskOutputInsp" ID="${identity@dr.WfNode#Disk_Processed..ID}" Name="Disk_Processed" XYposition="${layout@dr.WfNode#Disk_Processed..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.diskoutput.DiskOutputInsp" Type="1" ver="1.0">
                                    <dr.DiskOutputData:Data ver="11.0">
                                        <dr.DiskOutputData.directory:Distribution_directory active="true" fit="INSTANCE" ver="1.0">
                                            <Value value="extRef"/>
                                        </dr.DiskOutputData.directory:Distribution_directory>
                                        <dr.DiskOutputData.compType:Compression active="true" fit="FINAL" ver="1.0">
                                            <dr.CompressionType:Value value="NONE"/>
                                        </dr.DiskOutputData.compType:Compression>
                                        <dr.DiskOutputData.command:Command active="true" fit="FINAL" ver="1.0">
                                            <Value value=""/>
                                        </dr.DiskOutputData.command:Command>
                                        <dr.DiskOutputData.arguments:Arguments active="true" fit="FINAL" ver="1.0">
                                            <Value value=""/>
                                        </dr.DiskOutputData.arguments:Arguments>
                                        <dr.DiskOutputData.createEmpty:Create_empty_files active="true" fit="FINAL" ver="1.0">
                                            <Value value="true"/>
                                        </dr.DiskOutputData.createEmpty:Create_empty_files>
                                        <dr.DiskOutputData.createNonExistingBaseDir:Create_Non-----.Existing_Base_Directory active="true" fit="FINAL" ver="1.0">
                                            <Value value="true"/>
                                        </dr.DiskOutputData.createNonExistingBaseDir:Create_Non-----.Existing_Base_Directory>
                                        <dr.DiskOutputData.inputType:Input_type active="true" fit="FINAL" ver="1.0">
                                            <dr.InputType:Value value="ByteArray"/>
                                        </dr.DiskOutputData.inputType:Input_type>
                                    </dr.DiskOutputData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.wf.DRFNTServiceInsp" Type="0" ver="1.0">
                                    <dr.DRFNTServiceConfig:Data ver="10.0">
                                        <dr.DRFNTServiceConfig.entries:FNT_Entries active="true" fit="FINAL" ver="1.0">
                                            <dr.DRFNTServiceEntry:Value>
                                                <dr.DRFNTServiceEntry:value Alignment="1" Delimiter="false" Mim_entry="Rec_Meta_Init.ORIGINAL_FILENAME" Size="-1" Trailing_separator="_" ver="3.0"/>
                                                <dr.DRFNTServiceEntry:value Alignment="1" Date_format="yyyyMMddHHmmss" Delimiter="false" Mim_entry="Rec_Meta_Init.PROCESSED_TIMESTAMP" Size="-1" ver="3.0"/>
                                            </dr.DRFNTServiceEntry:Value>
                                        </dr.DRFNTServiceConfig.entries:FNT_Entries>
                                        <dr.DRFNTServiceConfig.createNonExistDirectories:FNT---.CREATE---.DIRS active="true" fit="FINAL" ver="1.0">
                                            <Value value="true"/>
                                        </dr.DRFNTServiceConfig.createNonExistDirectories:FNT---.CREATE---.DIRS>
                                        <dr.DRFNTServiceConfig.---.FNTListEnabled:FNT_list_enabled active="false" fit="FINAL" ver="1.0">
                                            <Value value="true"/>
                                        </dr.DRFNTServiceConfig.---.FNTListEnabled:FNT_list_enabled>
                                    </dr.DRFNTServiceConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.interwf.InterWFOutputInsp" ID="${identity@dr.WfNode#Audit_IWF..ID}" Name="Audit_IWF" XYposition="${layout@dr.WfNode#Audit_IWF..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.interwf.InterWFOutputInsp" Type="1" ver="1.0">
                                    <dr.InterWFOutputData:Data ver="1.0">
                                        <dr.InterWFOutputData.myProfile:Profile_Key active="true" fit="FINAL" ver="1.0">
                                            <dr.DRConfiguration:Value Folder="ZZ_CA_PRF" Key="DZ11617798045360" Name="PRF_IWF_Audit_Processing" Type="Inter Workflow Profile" ver="1.0"/>
                                        </dr.InterWFOutputData.myProfile:Profile_Key>
                                        <dr.InterWFOutputData.myMIMs:MIM_Map active="true" fit="FINAL" ver="1.0">
                                            <Value/>
                                        </dr.InterWFOutputData.myMIMs:MIM_Map>
                                        <dr.InterWFOutputData.myShallCreateEmptyBatches:Create_empty active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.InterWFOutputData.myShallCreateEmptyBatches:Create_empty>
                                    </dr.InterWFOutputData:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.diskinput.DiskAdvInputInsp" ID="${identity@dr.WfNode#Disk_In..ID}" Name="Disk_In" XYposition="${layout@dr.WfNode#Disk_In..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.diskinput.DiskAdvInputInsp" Type="1" ver="1.0">
                                    <dr.DiskAdvInputData:Data ver="7.0">
                                        <dr.DiskAdvInputData.routeFileRef:Route_File_Reference_UDR active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DiskAdvInputData.routeFileRef:Route_File_Reference_UDR>
                                        <dr.DiskAdvInputData.collectionStrategyName:CollectionStrategyName active="true" fit="FINAL" ver="1.0">
                                            <Value/>
                                        </dr.DiskAdvInputData.collectionStrategyName:CollectionStrategyName>
                                        <dr.DiskAdvInputData.strategyCombinationClass:StrategyCombinationClass active="true" fit="FINAL" ver="1.0">
                                            <Value value="com.digitalroute.misc.advcoll.impl.DefaultCollectionStrategy"/>
                                        </dr.DiskAdvInputData.strategyCombinationClass:StrategyCombinationClass>
                                        <dr.DiskAdvInputData.strategyClasses:StrategyClasses active="true" fit="FINAL" ver="1.0">
                                            <STRING:Value>
                                                <value value="com.digitalroute.misc.advcoll.impl.DefaultFileInfo"/>
                                                <value value="com.digitalroute.misc.advcoll.impl.DefaultSourceFileHandling"/>
                                            </STRING:Value>
                                        </dr.DiskAdvInputData.strategyClasses:StrategyClasses>
                                        <dr.DiskAdvInputData.strategyConfigs:StrategyConfigs active="true" fit="FINAL" ver="1.0">
                                            <com.digitalroute.devkit.hidden.DRGeneratedFromContract:Value>
                                                <dr.DefaultFileInfoConfig:value ver="8.0">
                                                    <dr.DefaultFileInfoConfig.baseDir:BaseDir active="true" fit="INSTANCE" ver="1.0">
                                                        <Value value="extRef"/>
                                                    </dr.DefaultFileInfoConfig.baseDir:BaseDir>
                                                    <dr.DefaultFileInfoConfig.subfolders:Subfolders active="true" fit="FINAL" ver="1.0">
                                                        <Value value="false"/>
                                                    </dr.DefaultFileInfoConfig.subfolders:Subfolders>
                                                    <dr.DefaultFileInfoConfig.fileRegExp:RegExp active="true" fit="FINAL" ver="1.0">
                                                        <Value value=".*"/>
                                                    </dr.DefaultFileInfoConfig.fileRegExp:RegExp>
                                                    <dr.DefaultFileInfoConfig.compType:CompressionType active="true" fit="FINAL" ver="1.0">
                                                        <dr.CompressionType:Value value="NONE"/>
                                                    </dr.DefaultFileInfoConfig.compType:CompressionType>
                                                </dr.DefaultFileInfoConfig:value>
                                                <dr.DefaultSourceFileHandlingConfigExt:value ver="5.1">
                                                    <dr.DefaultSourceFileHandlingConfig.moveBeforeRetrieval:Move_before active="false" fit="FINAL" ver="1.0">
                                                        <Value value="false"/>
                                                    </dr.DefaultSourceFileHandlingConfig.moveBeforeRetrieval:Move_before>
                                                    <dr.DefaultSourceFileHandlingConfig.moveSuffix:Move_Suffix active="false" fit="FINAL" ver="1.0">
                                                        <Value value=""/>
                                                    </dr.DefaultSourceFileHandlingConfig.moveSuffix:Move_Suffix>
                                                    <dr.DefaultSourceFileHandlingConfig.idleTime:Max_idle_time active="true" fit="FINAL" ver="1.0">
                                                        <Value value="0"/>
                                                    </dr.DefaultSourceFileHandlingConfig.idleTime:Max_idle_time>
                                                    <dr.DefaultSourceFileHandlingConfig.rbType:Retrieval_behaviour active="true" fit="FINAL" ver="1.0">
                                                        <dr.RetrievalType:Value value="IGNORE"/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbType:Retrieval_behaviour>
                                                    <dr.DefaultSourceFileHandlingConfig.rbDirectory:Move_to_directory active="false" fit="FINAL" ver="1.0">
                                                        <Value value=""/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbDirectory:Move_to_directory>
                                                    <dr.DefaultSourceFileHandlingConfig.rbRenamePrefix:Filename_prefix active="false" fit="FINAL" ver="1.0">
                                                        <Value value=""/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbRenamePrefix:Filename_prefix>
                                                    <dr.DefaultSourceFileHandlingConfig.rbRenameSuffix:Filename_suffix active="false" fit="FINAL" ver="1.0">
                                                        <Value value=""/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbRenameSuffix:Filename_suffix>
                                                    <dr.DefaultSourceFileHandlingConfig.rbSearch:Filename_search active="false" fit="FINAL" ver="1.0">
                                                        <Value value=""/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbSearch:Filename_search>
                                                    <dr.DefaultSourceFileHandlingConfig.rbReplace:Filename_replace_value active="false" fit="FINAL" ver="1.0">
                                                        <Value value=""/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbReplace:Filename_replace_value>
                                                    <dr.DefaultSourceFileHandlingConfig.rbKeepInterval:Keep_interval active="false" fit="FINAL" ver="1.0">
                                                        <Value value="-1"/>
                                                    </dr.DefaultSourceFileHandlingConfig.rbKeepInterval:Keep_interval>
                                                </dr.DefaultSourceFileHandlingConfigExt:value>
                                            </com.digitalroute.devkit.hidden.DRGeneratedFromContract:Value>
                                        </dr.DiskAdvInputData.strategyConfigs:StrategyConfigs>
                                    </dr.DiskAdvInputData:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.wf.DRFNSServiceInsp" Type="0" ver="1.0">
                                    <dr.DRFNSServiceConfigExtension:Data ver="1.1">
                                        <dr.DRFNSServiceConfig.enabled:Is_enabled active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRFNSServiceConfig.enabled:Is_enabled>
                                        <dr.DRFNSServiceConfig.startPos:Start_position active="false" fit="FINAL" ver="1.0">
                                            <Value value="-1"/>
                                        </dr.DRFNSServiceConfig.startPos:Start_position>
                                        <dr.DRFNSServiceConfig.seqNoLen:Sequence_no_length active="false" fit="FINAL" ver="1.0">
                                            <Value value="-1"/>
                                        </dr.DRFNSServiceConfig.seqNoLen:Sequence_no_length>
                                        <dr.DRFNSServiceConfig.wrapOnSeqNo:Wrap_on_sequence_no active="false" fit="FINAL" ver="1.0">
                                            <Value value="-1"/>
                                        </dr.DRFNSServiceConfig.wrapOnSeqNo:Wrap_on_sequence_no>
                                        <dr.DRFNSServiceConfig.wrapToSeqNo:Wrap_to_sequence_no active="false" fit="FINAL" ver="1.0">
                                            <Value value="0"/>
                                        </dr.DRFNSServiceConfig.wrapToSeqNo:Wrap_to_sequence_no>
                                        <dr.DRFNSServiceConfigExtension--.NextSeqNoExt:Next_sequence_no active="false" fit="INSTANCE" ver="1.0">
                                            <Value value="-1"/>
                                        </dr.DRFNSServiceConfigExtension--.NextSeqNoExt:Next_sequence_no>
                                        <Seq_No_Check value="0"/>
                                        <dr.DRFNSServiceConfig.shallWarnOnOutOfSequence:Shall_warn_on_out_of_sequence active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRFNSServiceConfig.shallWarnOnOutOfSequence:Shall_warn_on_out_of_sequence>
                                    </dr.DRFNSServiceConfigExtension:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.wf.DRFileInfoSortOrderServiceInsp" Type="0" ver="1.0">
                                    <dr.DRFileInfoSortOrderServiceConfig:Data ver="1.0">
                                        <dr.DRFileInfoSortOrderServiceConfig.enabled:Is_enabled active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.enabled:Is_enabled>
                                        <dr.DRFileInfoSortOrderServiceConfig.orderType:Order_type active="false" fit="FINAL" ver="1.0">
                                            <dr.DRFileOrderType:Value value="FILENAME_VALUE"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.orderType:Order_type>
                                        <dr.DRFileInfoSortOrderServiceConfig.patternType:Pattern_type active="false" fit="FINAL" ver="1.0">
                                            <dr.DRFilenamePatternSelection:Value value="POSITION"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.patternType:Pattern_type>
                                        <dr.DRFileInfoSortOrderServiceConfig.startPos:Start_position active="false" fit="FINAL" ver="1.0">
                                            <Value value="0"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.startPos:Start_position>
                                        <dr.DRFileInfoSortOrderServiceConfig.length:Length active="false" fit="FINAL" ver="1.0">
                                            <Value value="0"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.length:Length>
                                        <dr.DRFileInfoSortOrderServiceConfig.regExp:Regular_expression active="false" fit="FINAL" ver="1.0">
                                            <Value/>
                                        </dr.DRFileInfoSortOrderServiceConfig.regExp:Regular_expression>
                                        <dr.DRFileInfoSortOrderServiceConfig.sortType:Sort_type active="false" fit="FINAL" ver="1.0">
                                            <dr.DRFilenameSortType:Value value="ALPHANUMERIC"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.sortType:Sort_type>
                                        <dr.DRFileInfoSortOrderServiceConfig.ignoreCase:Ignore_case active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.ignoreCase:Ignore_case>
                                        <dr.DRFileInfoSortOrderServiceConfig.sortOrder:Sort_order active="false" fit="FINAL" ver="1.0">
                                            <dr.DRSortOrder:Value value="ASCENDING"/>
                                        </dr.DRFileInfoSortOrderServiceConfig.sortOrder:Sort_order>
                                    </dr.DRFileInfoSortOrderServiceConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                        <dr.WfNode:value Classname="com.digitalroute.wfc.aggregation.AggregationInsp" ID="${identity@dr.WfNode#Aggregation..ID}" Name="Aggregation" XYposition="${layout@dr.WfNode#Aggregation..XYposition}" ver="2.0">
                            <dr.WfNodeConfig:Configuration>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.wfc.aggregation.AggregationInsp" Type="1" ver="1.0">
                                    <dr.AggregationConfig:Data ver="10.6">
                                        <dr.AggregationConfig.profile:Profile_Key active="true" fit="FINAL" ver="1.0">
                                            <dr.DRConfiguration:Value Folder="ZZ_SVC0052" Key="DZ11641468304723" Name="PRF_Aggr_Inbound_RL" Type="Aggregation Profile" ver="1.0"/>
                                        </dr.AggregationConfig.profile:Profile_Key>
                                        <dr.AggregationConfig.readonly:Read_Only active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.AggregationConfig.readonly:Read_Only>
                                        <dr.AggregationConfig.timeoutDisable:Disable_Timeout active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.AggregationConfig.timeoutDisable:Disable_Timeout>
                                        <dr.AggregationConfig.defragTrigger:Defragmentation active="false" fit="FINAL" ver="1.0">
                                            <dr.DefragType:Value value="NONE"/>
                                        </dr.AggregationConfig.defragTrigger:Defragmentation>
                                        <dr.AggregationConfig.defragEachBatchTimeLimit:Defragmentation_After_Each_Batch_Time_Limit active="false" fit="FINAL" ver="1.0">
                                            <Value value="5"/>
                                        </dr.AggregationConfig.defragEachBatchTimeLimit:Defragmentation_After_Each_Batch_Time_Limit>
                                        <dr.AggregationConfig.defragAfterNumberOfBatches:Defragmentation_After_Number_of_Batches active="false" fit="FINAL" ver="1.0">
                                            <Value value="1"/>
                                        </dr.AggregationConfig.defragAfterNumberOfBatches:Defragmentation_After_Number_of_Batches>
                                        <dr.AggregationConfig.defragFileAgeLimit:Defragmentation_File_Age_Limit active="false" fit="FINAL" ver="1.0">
                                            <Value value="5"/>
                                        </dr.AggregationConfig.defragFileAgeLimit:Defragmentation_File_Age_Limit>
                                        <dr.AggregationConfig.defragFileAgeLimit---.TimeUnit:Defragmentation_File_Age_Limit_Time_Unit active="false" fit="FINAL" ver="1.0">
                                            <Value value="MINUTES"/>
                                        </dr.AggregationConfig.defragFileAgeLimit---.TimeUnit:Defragmentation_File_Age_Limit_Time_Unit>
                                        <dr.AggregationConfig.nullTimeoutBehaviour:Null_Timeout active="true" fit="FINAL" ver="1.0">
                                            <Value value="2"/>
                                        </dr.AggregationConfig.nullTimeoutBehaviour:Null_Timeout>
                                        <dr.AggregationConfig.defaultTimeout:Default_Timeout active="true" fit="FINAL" ver="1.0">
                                            <Value value="60"/>
                                        </dr.AggregationConfig.defaultTimeout:Default_Timeout>
                                        <dr.AggregationConfig.noMatchBehaviour:No_Match active="true" fit="FINAL" ver="1.0">
                                            <Value value="0"/>
                                        </dr.AggregationConfig.noMatchBehaviour:No_Match>
                                        <dr.AggregationConfig.noMatchRouter:No_Match_Router active="true" fit="FINAL" ver="1.0">
                                            <Value value="toWFB"/>
                                        </dr.AggregationConfig.noMatchRouter:No_Match_Router>
                                        <dr.AggregationConfig.noStorageBehaviour:No_Storage_Behaviour active="true" fit="FINAL" ver="1.0">
                                            <Value value="0"/>
                                        </dr.AggregationConfig.noStorageBehaviour:No_Storage_Behaviour>
                                        <dr.AggregationConfig.noStorageRouter:No_Storage_Router active="true" fit="FINAL" ver="1.0">
                                            <Value/>
                                        </dr.AggregationConfig.noStorageRouter:No_Storage_Router>
                                        <dr.AggregationConfig.mainScript:Main_script active="true" fit="FINAL" ver="1.0">
                                            <Value><![CDATA[import ultra.ZZ_CA_UFL.UFL_WFB_UDR;
import ultra.ZZ_CA_UFL.UFL_Audit;

import apl.ZZ_CA_APL.APL_Audit_Functions;
import apl.ZZ_CA_APL.APL_Common_Functions;
import apl.ZZ_SVC0052.APL_Payload_Functions;
import apl.ZZC_CA_APL.APL_Common_Functions;
import apl.ZZC_CA_APL.APL_Common_Constants;
import apl.ZZC_CA_APL.APL_Common_Variables;

int DEFAULT_SESSION_TIMEOUT;
int RFC_BATCH_RECORD_LIMIT;

list <AuditRecord_TI> audRecAggregateList;
mimPublish (global, "audRecAggregateList", list <AuditRecord_TI>);

sessionInit
{
    string session_timeout_str = externalReferenceGet("ZZ_SVC0052.PRF_SVC0052_ExtRef", "INBOUND_RFC_SESSION_TIMEOUT");
    string batch_limit_str = externalReferenceGet("ZZ_SVC0052.PRF_SVC0052_ExtRef", "INBOUND_RFC_BATCH_RECORD_LIMIT");
    
    if ( !strToInt(DEFAULT_SESSION_TIMEOUT, session_timeout_str) )
        DEFAULT_SESSION_TIMEOUT = 60;  // Default to 60 if value from ext ref is not an integer
        
    if ( !strToInt(RFC_BATCH_RECORD_LIMIT, batch_limit_str) )
        RFC_BATCH_RECORD_LIMIT = 100;  // Default to 100 if value from ext ref is not an integer
    
    session.header = null;
    session.recList = listCreate(TYPE1_Rec_Int);
    sessionTimeout(session, DEFAULT_SESSION_TIMEOUT);
}

beginBatch {
    string filename = (string) mimGet("Disk_In", "Source Filename");
    globalOrigFilename = extractOriginalFilename(filename);    
    audRecAggregateList = listCreate(AuditRecord_TI);
}

consume {
    if (session.header == null) { 
        session.header = (TYPE1_Header_Internal) input.HEADER_DATA;
        S4IntfID = (string)mimGet("Rec_Meta_Init", "S4IntfID");
    }
    listAdd(session.recList, input);
    
    if ( listSize(session.recList) >= RFC_BATCH_RECORD_LIMIT )
    {
        AuditRecord_TI audRecAggregate = udrCreate(AuditRecord_TI);
        initAudRec(audRecAggregate,AUDR_REC_FUNC_AGGREGATE);
        audRecAggregate.IN_RECORD_COUNT = RFC_BATCH_RECORD_LIMIT;
        listAdd(audRecAggregateList, audRecAggregate);
        // get first record
        TYPE1_Rec_Int firstRec = (TYPE1_Rec_Int) listGet(session.recList, 0);
        
        CCData ccd = udrCreate(CCData);
        ccd = mapCCDataFromAggrSession(session);

        //ccd.PREV_RECORD_TXN_ID = audRecAggregate.RECORD_TXN_ID;
        sleep(2000); // brief pause before sending to SAP processing
        udrRoute(ccd, "toWFB");
        
        sessionRemove(session);
         
        debug("RFC_BATCH_RECORD_LIMIT reached, flushing and session removed...");
    }
}

timeout {
    debug("Timeout block");
    // To flush the remaining records from the session which does not reach the RFC_BATCH_RECORD_LIMIT
    if ( listSize(session.recList) > 0 )
    {
        AuditRecord_TI audRecAggregate = udrCreate(AuditRecord_TI);
        initAudRec(audRecAggregate, AUDR_REC_FUNC_AGGREGATE);
        audRecAggregate.IN_RECORD_COUNT = listSize(session.recList);
        listAdd(audRecAggregateList, audRecAggregate);
        // get first record
        TYPE1_Rec_Int firstRec = (TYPE1_Rec_Int) listGet(session.recList, 0);
            
        CCData ccd = udrCreate(CCData);
        ccd = mapCCDataFromAggrSession(session);

        //ccd.PREV_RECORD_TXN_ID = audRecAggregate.RECORD_TXN_ID;
        sleep(2000);  // brief pause before sending to SAP processing
        udrRoute(ccd, "toWFB");
    }
    sessionRemove(session); 
    
    debug("RFC_BATCH_RECORD_LIMIT reached, flushing and session removed...");
}

drain {
    mimSet("audRecAggregateList", audRecAggregateList);
    
}

deinitialize
{
    debug("Deinitializing - Flushing sessions");
    aggregationHintFlushSessions("Aggregation");
}]]></Value>
                                        </dr.AggregationConfig.mainScript:Main_script>
                                        <dr.AggregationConfig.intervalTimeout:Interval_Timeout active="true" fit="FINAL" ver="1.0">
                                            <Value value="-2147483648"/>
                                        </dr.AggregationConfig.intervalTimeout:Interval_Timeout>
                                        <dr.AggregationConfig.commitTimeout:Commit_Timeout active="true" fit="FINAL" ver="1.0">
                                            <Value value="-2147483648"/>
                                        </dr.AggregationConfig.commitTimeout:Commit_Timeout>
                                        <dr.AggregationConfig.commitCount:Commit_Count active="true" fit="FINAL" ver="1.0">
                                            <Value value="-2147483648"/>
                                        </dr.AggregationConfig.commitCount:Commit_Count>
                                    </dr.AggregationConfig:Data>
                                </dr.WfNodeConfig:value>
                                <dr.WfNodeConfig:value Classname="com.digitalroute.devkit.hidden.DRThreadBufferInsp" Type="0" ver="1.0">
                                    <dr.DRThreadBufferConfig:Data ver="1.0">
                                        <dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread active="true" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.useOwnThread:Advanced_Own_Thread>
                                        <dr.DRThreadBufferConfig.printStats:Thread_Print_Stats active="false" fit="FINAL" ver="1.0">
                                            <Value value="false"/>
                                        </dr.DRThreadBufferConfig.printStats:Thread_Print_Stats>
                                    </dr.DRThreadBufferConfig:Data>
                                </dr.WfNodeConfig:value>
                            </dr.WfNodeConfig:Configuration>
                        </dr.WfNode:value>
                    </Nodes>
                    <Routes>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toTransform..Destination ID}" ID="${identity@dr.WfRoute#toTransform..ID}" Name="toTransform" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toTransform..Source ID}" Stroke_points="${layout@dr.WfRoute#toTransform..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toDupHandling..Destination ID}" ID="${identity@dr.WfRoute#toDupHandling..ID}" Name="toDupHandling" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toDupHandling..Source ID}" Stroke_points="${layout@dr.WfRoute#toDupHandling..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toMapping..Destination ID}" ID="${identity@dr.WfRoute#toMapping..ID}" Name="toMapping" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toMapping..Source ID}" Stroke_points="${layout@dr.WfRoute#toMapping..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toDupUDRCheck..Destination ID}" ID="${identity@dr.WfRoute#toDupUDRCheck..ID}" Name="toDupUDRCheck" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toDupUDRCheck..Source ID}" Stroke_points="${layout@dr.WfRoute#toDupUDRCheck..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#response..Destination ID}" ID="${identity@dr.WfRoute#response..ID}" Name="response" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#response..Source ID}" Stroke_points="${layout@dr.WfRoute#response..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toECS..Destination ID}" ID="${identity@dr.WfRoute#toECS..ID}" Name="toECS" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toECS..Source ID}" Stroke_points="${layout@dr.WfRoute#toECS..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toECS1..Destination ID}" ID="${identity@dr.WfRoute#toECS1..ID}" Name="toECS" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toECS1..Source ID}" Stroke_points="${layout@dr.WfRoute#toECS1..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toTransform1..Destination ID}" ID="${identity@dr.WfRoute#toTransform1..ID}" Name="toTransform" Realtime_mode="0" Route_type="1" Source_ID="${identity@dr.WfRoute#toTransform1..Source ID}" Stroke_points="${layout@dr.WfRoute#toTransform1..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toECS12..Destination ID}" ID="${identity@dr.WfRoute#toECS12..ID}" Name="toECS" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toECS12..Source ID}" Stroke_points="${layout@dr.WfRoute#toECS12..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toDecoder..Destination ID}" ID="${identity@dr.WfRoute#toDecoder..ID}" Name="toDecoder" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toDecoder..Source ID}" Stroke_points="${layout@dr.WfRoute#toDecoder..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toAggr..Destination ID}" ID="${identity@dr.WfRoute#toAggr..ID}" Name="toAggr" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toAggr..Source ID}" Stroke_points="${layout@dr.WfRoute#toAggr..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toWFB..Destination ID}" ID="${identity@dr.WfRoute#toWFB..ID}" Name="toWFB" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toWFB..Source ID}" Stroke_points="${layout@dr.WfRoute#toWFB..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toProcessed..Destination ID}" ID="${identity@dr.WfRoute#toProcessed..ID}" Name="toProcessed" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toProcessed..Source ID}" Stroke_points="${layout@dr.WfRoute#toProcessed..Stroke points}" ver="2.0"/>
                        <dr.WfRoute:value Destination_ID="${identity@dr.WfRoute#toAudit..Destination ID}" ID="${identity@dr.WfRoute#toAudit..ID}" Name="toAudit" Realtime_mode="0" Route_type="2" Source_ID="${identity@dr.WfRoute#toAudit..Source ID}" Stroke_points="${layout@dr.WfRoute#toAudit..Stroke points}" ver="2.0"/>
                    </Routes>
                    <Service/>
                    <Logged_error_MIM/>
                    <dr.WorkflowExecutionConfig:Execution_Config ver="8.0">
                        <dr.WorkflowExecutionConfig.executionSettings:Execution_Settings extref_key="" ver="1.0">
                            <dr.ExecutionSettings:Value ver="3.0">
                                <enabled value="false"/>
                            </dr.ExecutionSettings:Value>
                        </dr.WorkflowExecutionConfig.executionSettings:Execution_Settings>
                        <dr.WorkflowExecutionConfig.throughputMIM:Throughput_MIM extref_key="" ver="1.0">
                            <Value/>
                        </dr.WorkflowExecutionConfig.throughputMIM:Throughput_MIM>
                        <dr.WorkflowExecutionConfig.debugType:Debug_Type extref_key="" ver="1.0">
                            <dr.DebugType:Value value="EVENT"/>
                        </dr.WorkflowExecutionConfig.debugType:Debug_Type>
                        <dr.WorkflowExecutionConfig.noOfFilesToKeep:Number_of_Files_to_Keep extref_key="" ver="1.0">
                            <Value value="0"/>
                        </dr.WorkflowExecutionConfig.noOfFilesToKeep:Number_of_Files_to_Keep>
                        <dr.WorkflowExecutionConfig.txnHandler:Transaction_Handler extref_key="" ver="1.0">
                            <Value value="Default Handler"/>
                        </dr.WorkflowExecutionConfig.txnHandler:Transaction_Handler>
                    </dr.WorkflowExecutionConfig:Execution_Config>
                    <dr.DynamicConfigStorableDefinition:dyn ver="1.0">
                        <fields>
                            <dr.FieldDescriptorStorable:value ver="1.0">
                                <name value="Check_UDR_Duplicate"/>
                                <title value="Check_UDR_Duplicate"/>
                                <section value="UDR"/>
                                <description value="UDR Duplicate Check Flag"/>
                                <dynStorableKey value="Check_UDR_Duplicate"/>
                                <type value="Boolean"/>
                                <defaultValue value="true"/>
                            </dr.FieldDescriptorStorable:value>
                        </fields>
                    </dr.DynamicConfigStorableDefinition:dyn>
                    <dr.DRConfiguration:External_Reference_Profile Folder="ZZ_SVC0052" Key="DZ11641468087231" Name="PRF_SVC0052_ExtRef" Type="External Reference Profile" ver="1.0"/>
                    <External_Reference_Values type="java.util.Hashtable"/>
                    <External_Reference_Lists type="java.util.Hashtable"/>
                    <External_Reference_Maps type="java.util.Hashtable"/>
                    <null:Error_UDR_type_name/>
                    <Error_map/>
                    <null:Audit_Profile/>
                </dr.WorkflowBatchData:Data>
            </mz:workflow-template>
            <mz:wf-parameters>
                <mz:param-def label="UDR - Check_UDR_Duplicate" name="Check_UDR_Duplicate" nodeId="1646385121" nodeName="UDR" type="INSTANCE"/>
                <mz:param-def label="Disk - Directory" name="Distribution directory" nodeId="-853019564" nodeName="Disk_Processed" type="INSTANCE"/>
                <mz:param-def label="Source - Directory" name="BaseDir" nodeId="2108931552" nodeName="Disk_In" type="INSTANCE"/>
            </mz:wf-parameters>
            <mz:wf-instances>
                <mz:wf-instance instanceId="1" name="IF0236" state="VALID" validationError="">
                    <mz:param name="UDR/Check_UDR_Duplicate" storable-id="dr.DynField">
                        <dr.DynField:dr.DynField extref_key="" ver="1.0">
                            <Value value="false"/>
                        </dr.DynField:dr.DynField>
                    </mz:param>
                    <mz:param name="Disk_Processed/Distribution directory" storable-id="dr.DiskOutputData.directory">
                        <dr.DiskOutputData.directory:dr.DiskOutputData.directory extref_key="IF0236_PROC_DIR" ver="11.0">
                            <Value/>
                        </dr.DiskOutputData.directory:dr.DiskOutputData.directory>
                    </mz:param>
                    <mz:param name="Disk_In/BaseDir" storable-id="dr.DefaultFileInfoConfig.baseDir">
                        <dr.DefaultFileInfoConfig.baseDir:dr.DefaultFileInfoConfig.baseDir extref_key="IF0236_INBOUND_PREPROCESSED_DIR" ver="8.0">
                            <Value/>
                        </dr.DefaultFileInfoConfig.baseDir:dr.DefaultFileInfoConfig.baseDir>
                    </mz:param>
                </mz:wf-instance>
            </mz:wf-instances>
            <documentation value=""/>
            <parameters value=""/>
            <Current_Comment/>
        </dr.Configuration:dr.Configuration>
    </mz:data>
    <mz:referenced-data>
        <layout>
            <dr.WfNode>
                <dr.WfRoute--.StorablePoint:UDR---.Transform..XYposition X_position="800" Y_position="200" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Decoder..XYposition X_position="320" Y_position="200" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Type1---.Dup---.Check..XYposition X_position="640" Y_position="200" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Duplicate---.Handling..XYposition X_position="640" Y_position="360" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Rec---.Meta---.Init..XYposition X_position="480" Y_position="200" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:SAP---.Processing---.Workflow---.Bridge..XYposition X_position="1120" Y_position="200" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Response---.Analysis..XYposition X_position="1120" Y_position="360" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:ECS..XYposition X_position="800" Y_position="360" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Disk---.Processed..XYposition X_position="140" Y_position="520" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Audit---.IWF..XYposition X_position="1120" Y_position="520" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Disk---.In..XYposition X_position="140" Y_position="200" ver="1.0"/>
                <dr.WfRoute--.StorablePoint:Aggregation..XYposition X_position="960" Y_position="200" ver="1.0"/>
            </dr.WfNode>
            <dr.WfRoute>
                <toTransform..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="667" Y_position="193" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="774" Y_position="193" ver="1.0"/>
                </toTransform..Stroke_points>
                <toDupHandling..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="640" Y_position="220" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="640" Y_position="327" ver="1.0"/>
                </toDupHandling..Stroke_points>
                <toMapping..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="347" Y_position="193" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="454" Y_position="193" ver="1.0"/>
                </toMapping..Stroke_points>
                <toDupUDRCheck..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="507" Y_position="193" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="614" Y_position="193" ver="1.0"/>
                </toDupUDRCheck..Stroke_points>
                <response..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="1120" Y_position="220" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="1120" Y_position="327" ver="1.0"/>
                </response..Stroke_points>
                <toECS..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="800" Y_position="220" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="800" Y_position="327" ver="1.0"/>
                </toECS..Stroke_points>
                <toECS1..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="1094" Y_position="353" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="827" Y_position="353" ver="1.0"/>
                </toECS1..Stroke_points>
                <toTransform1..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="507" Y_position="169" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="588" Y_position="111" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="686" Y_position="96" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="774" Y_position="172" ver="1.0"/>
                </toTransform1..Stroke_points>
                <toECS12..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="667" Y_position="353" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="774" Y_position="353" ver="1.0"/>
                </toECS12..Stroke_points>
                <toDecoder..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="167" Y_position="193" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="294" Y_position="193" ver="1.0"/>
                </toDecoder..Stroke_points>
                <toAggr..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="827" Y_position="193" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="934" Y_position="193" ver="1.0"/>
                </toAggr..Stroke_points>
                <toWFB..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="987" Y_position="193" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="1094" Y_position="193" ver="1.0"/>
                </toWFB..Stroke_points>
                <toProcessed..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="140" Y_position="220" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="140" Y_position="487" ver="1.0"/>
                </toProcessed..Stroke_points>
                <toAudit..Stroke_points>
                    <dr.WfRoute--.StorablePoint:value X_position="1120" Y_position="380" ver="1.0"/>
                    <dr.WfRoute--.StorablePoint:value X_position="1120" Y_position="487" ver="1.0"/>
                </toAudit..Stroke_points>
            </dr.WfRoute>
        </layout>
        <identity>
            <dr.WfNode>
                <UDR---.Transform..ID value="-1939312021"/>
                <Decoder..ID value="-1388945462"/>
                <Type1---.Dup---.Check..ID value="169118557"/>
                <Duplicate---.Handling..ID value="792598674"/>
                <Rec---.Meta---.Init..ID value="-1186562757"/>
                <SAP---.Processing---.Workflow---.Bridge..ID value="-547687404"/>
                <Response---.Analysis..ID value="-1426521943"/>
                <ECS..ID value="-2141972883"/>
                <Disk---.Processed..ID value="-853019564"/>
                <Audit---.IWF..ID value="-730408042"/>
                <Disk---.In..ID value="2108931552"/>
                <Aggregation..ID value="1271441448"/>
            </dr.WfNode>
            <dr.WfRoute>
                <toTransform..ID value="-10"/>
                <toTransform..Source_ID value="169118557"/>
                <toTransform..Destination_ID value="-1939312021"/>
                <toDupHandling..ID value="-11"/>
                <toDupHandling..Source_ID value="169118557"/>
                <toDupHandling..Destination_ID value="792598674"/>
                <toMapping..ID value="-12"/>
                <toMapping..Source_ID value="-1388945462"/>
                <toMapping..Destination_ID value="-1186562757"/>
                <toDupUDRCheck..ID value="-14"/>
                <toDupUDRCheck..Source_ID value="-1186562757"/>
                <toDupUDRCheck..Destination_ID value="169118557"/>
                <response..ID value="-18"/>
                <response..Source_ID value="-547687404"/>
                <response..Destination_ID value="-1426521943"/>
                <toECS..ID value="-27"/>
                <toECS..Source_ID value="-1939312021"/>
                <toECS..Destination_ID value="-2141972883"/>
                <toECS1..ID value="-28"/>
                <toECS1..Source_ID value="-1426521943"/>
                <toECS1..Destination_ID value="-2141972883"/>
                <toTransform1..ID value="-32"/>
                <toTransform1..Source_ID value="-1186562757"/>
                <toTransform1..Destination_ID value="-1939312021"/>
                <toECS12..ID value="-33"/>
                <toECS12..Source_ID value="792598674"/>
                <toECS12..Destination_ID value="-2141972883"/>
                <toDecoder..ID value="-34"/>
                <toDecoder..Source_ID value="2108931552"/>
                <toDecoder..Destination_ID value="-1388945462"/>
                <toAggr..ID value="-35"/>
                <toAggr..Source_ID value="-1939312021"/>
                <toAggr..Destination_ID value="1271441448"/>
                <toWFB..ID value="-37"/>
                <toWFB..Source_ID value="1271441448"/>
                <toWFB..Destination_ID value="-547687404"/>
                <toProcessed..ID value="-38"/>
                <toProcessed..Source_ID value="2108931552"/>
                <toProcessed..Destination_ID value="-853019564"/>
                <toAudit..ID value="-39"/>
                <toAudit..Source_ID value="-1426521943"/>
                <toAudit..Destination_ID value="-730408042"/>
            </dr.WfRoute>
        </identity>
    </mz:referenced-data>
</mz:configuration>
