<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<mz:configuration format-version="1.0">
    <mz:data>
        <dr.Configuration:dr.Configuration Folder="ZZR_SVC0261" Key="DZ11651738357281" Name="UFL_postEpisodicReportFile" Owner="D_WONG" Type="Ultra Format" encrypted="false" ver="6.0">
            <STRING:Access_Groups_-----.read_-----.write_-----.execute>
                <value value="All"/>
                <value value="All"/>
                <value value="All"/>
            </STRING:Access_Groups_-----.read_-----.write_-----.execute>
            <null:Auxiliary_Data/>
            <dr.UltraFormatConfig:Data ver="1.0">
                <Definition><![CDATA[xml_schema : output_encoding("UTF-8") {
    <?xml version="1.0" encoding="utf-8"?>
    <xs:schema id="EpisodicSubsidyRequest"
        xmlns:xs="http://www.w3.org/2001/XMLSchema">
        <xs:element minOccurs="1" maxOccurs="5000" name="EpisodicSubsidyRequest">
            <xs:complexType>
                <xs:sequence>
                    <xs:element minOccurs="1" maxOccurs="1" name="UniqueTransactionID" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="HealthcareFacility" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="UserID" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="UIN" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="CitizenshipStatus" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="DateOfBirth" type="xs:date" />
                    <xs:element minOccurs="1" maxOccurs="1" name="Setting" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="EpisodicUpdateCategory" type="xs:string" />
                    <xs:element minOccurs="1" maxOccurs="1" name="EpisodicReasonCode" type="xs:string" />
                    <xs:element name="SubsidySchemes" minOccurs="0" maxOccurs="1">
                        <xs:complexType>
                            <xs:sequence>
                                <xs:element minOccurs="1" maxOccurs="99" name="SubsidyScheme">
                                    <xs:complexType>
                                        <xs:sequence>
                                            <xs:element minOccurs="1" maxOccurs="1" name="SchemeCode" type="xs:string" />
                                            <xs:element minOccurs="1" maxOccurs="1" name="OriginalSubsidyBand" type="xs:string" />
                                            <xs:element minOccurs="1" maxOccurs="1" name="DeviatedSubsidyBand" type="xs:string" />
										</xs:sequence>
									</xs:complexType>
								</xs:element>
                            </xs:sequence>
                        </xs:complexType>
					</xs:element>
					<xs:element minOccurs="1" maxOccurs="1" name="ApprovalDate" type="xs:date" />
					<xs:element minOccurs="1" maxOccurs="1" name="Remarks" type="xs:string" />
					<xs:element minOccurs="1" maxOccurs="1" name="AVTier" type="xs:string" />
					<xs:element minOccurs="0" maxOccurs="1" name="PCHI" type="xs:integer" />
					<xs:element minOccurs="0" maxOccurs="1" name="PCFI" type="xs:integer" />
					<xs:element minOccurs="1" maxOccurs="1" name="PAN" type="xs:string" />
					<xs:element minOccurs="1" maxOccurs="1" name="SubmissionDate" type="xs:date" />
                </xs:sequence>
            </xs:complexType>
		</xs:element>
    </xs:schema>
};

internal episodicSubsidyRequest_Int {
    Header_TI header;
    list<EpisodicSubsidyRequest_TI> record;
    Footer_TI footer;
};

internal subsidySchemes {
    list<subsidyScheme> SubsidyScheme;
};

internal subsidyScheme{
    string SchemeCode;
    string OriginalSubsidyBand;
    string DeviatedSubsidyBand;
};

external Header : identified_by ( strStartsWith(header_id, "H"))
{
    ascii header_id : static_size(1);
    ascii Date       : static_size(8);
    ascii time       : terminated_by(0xA);
};

external Footer : terminated_by(EOF)
{
    ascii trailer_identifier : static_size(1);
    ascii num_of_detail_records : dynamic_size( remaining_size );
};


external WhiteSpace: identified_by(value == 0x20 || value == 0xA || value == 0xD ) { int value: static_size(1); };
in_map WS_map: external(WhiteSpace), discard_output {automatic;};

in_map Header_inMap     : external(Header), target_internal(Header_TI) { automatic; };
decoder Header_Decoder  : in_map(WS_map), in_map(Header_inMap);

in_map Footer_inMap     : external(Footer), target_internal(Footer_TI) { automatic; };
decoder Footer_Decoder  : in_map(WS_map), in_map(Footer_inMap);

in_map EpisodicSubsidyRequest_inMap    : external(EpisodicSubsidyRequest), target_internal(EpisodicSubsidyRequest_TI) { automatic : use_external_names; };
decoder EpisodicSubsidyRequest_Decoder : in_map(WS_map), in_map(EpisodicSubsidyRequest_inMap);

out_map Header_outMap                    : internal(Header_TI), external(Header) { automatic;};
out_map EpisodicSubsidyRequest_outMap    : internal(EpisodicSubsidyRequest_TI), external(EpisodicSubsidyRequest) { automatic;};
out_map Footer_outMap                    : internal(Footer_TI), external(Footer) { automatic;};

decoder SVC0261_Record_Decoder {
    decoder Header_Decoder;
    decoder EpisodicSubsidyRequest_Decoder*;
    decoder Footer_Decoder;
};

encoder SVC0261_Record_Encoder : out_map(Header_outMap), out_map(EpisodicSubsidyRequest_outMap), out_map(Footer_outMap);

//////////////////////////////////////////////////////////////////////////]]></Definition>
                <IsValid value="true"/>
            </dr.UltraFormatConfig:Data>
            <documentation value=""/>
            <parameters value=""/>
            <Current_Comment/>
        </dr.Configuration:dr.Configuration>
    </mz:data>
    <mz:referenced-data/>
</mz:configuration>
